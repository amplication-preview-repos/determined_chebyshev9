/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { HodDetails } from "./HodDetails";
import { HodDetailsCountArgs } from "./HodDetailsCountArgs";
import { HodDetailsFindManyArgs } from "./HodDetailsFindManyArgs";
import { HodDetailsFindUniqueArgs } from "./HodDetailsFindUniqueArgs";
import { CreateHodDetailsArgs } from "./CreateHodDetailsArgs";
import { UpdateHodDetailsArgs } from "./UpdateHodDetailsArgs";
import { DeleteHodDetailsArgs } from "./DeleteHodDetailsArgs";
import { HodDetailsService } from "../hodDetails.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => HodDetails)
export class HodDetailsResolverBase {
  constructor(
    protected readonly service: HodDetailsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "HodDetails",
    action: "read",
    possession: "any",
  })
  async _hodDetailsItemsMeta(
    @graphql.Args() args: HodDetailsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [HodDetails])
  @nestAccessControl.UseRoles({
    resource: "HodDetails",
    action: "read",
    possession: "any",
  })
  async hodDetailsItems(
    @graphql.Args() args: HodDetailsFindManyArgs
  ): Promise<HodDetails[]> {
    return this.service.hodDetailsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => HodDetails, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "HodDetails",
    action: "read",
    possession: "own",
  })
  async hodDetails(
    @graphql.Args() args: HodDetailsFindUniqueArgs
  ): Promise<HodDetails | null> {
    const result = await this.service.hodDetails(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HodDetails)
  @nestAccessControl.UseRoles({
    resource: "HodDetails",
    action: "create",
    possession: "any",
  })
  async createHodDetails(
    @graphql.Args() args: CreateHodDetailsArgs
  ): Promise<HodDetails> {
    return await this.service.createHodDetails({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HodDetails)
  @nestAccessControl.UseRoles({
    resource: "HodDetails",
    action: "update",
    possession: "any",
  })
  async updateHodDetails(
    @graphql.Args() args: UpdateHodDetailsArgs
  ): Promise<HodDetails | null> {
    try {
      return await this.service.updateHodDetails({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HodDetails)
  @nestAccessControl.UseRoles({
    resource: "HodDetails",
    action: "delete",
    possession: "any",
  })
  async deleteHodDetails(
    @graphql.Args() args: DeleteHodDetailsArgs
  ): Promise<HodDetails | null> {
    try {
      return await this.service.deleteHodDetails(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
